// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<DrillIllustration /> renders correctly for a drill with a video from vimeo 1`] = `
<View
  config={
    Object {
      "directionalOffsetThreshold": 80,
      "gestureIsClickThreshold": 10,
      "velocityThreshold": 0.3,
    }
  }
  onMoveShouldSetResponder={[Function]}
  onMoveShouldSetResponderCapture={[Function]}
  onResponderEnd={[Function]}
  onResponderGrant={[Function]}
  onResponderMove={[Function]}
  onResponderReject={[Function]}
  onResponderRelease={[Function]}
  onResponderStart={[Function]}
  onResponderTerminate={[Function]}
  onResponderTerminationRequest={[Function]}
  onStartShouldSetResponder={[Function]}
  onStartShouldSetResponderCapture={[Function]}
  onSwipeLeft={[Function]}
  onSwipeRight={[Function]}
  style={
    Object {
      "flex": 1,
    }
  }
>
  <View
    style={
      Array [
        Object {
          "height": 250,
        },
        false,
      ]
    }
  >
    <View
      style={
        Object {
          "alignItems": "center",
          "flex": 1,
          "height": 250,
          "justifyContent": "center",
        }
      }
    >
      <View
        style={
          Object {
            "position": "absolute",
          }
        }
      >
        <ActivityIndicator
          animating={true}
          color="#A6A6A6"
          hidesWhenStopped={true}
          size="large"
        />
        <Text>
          Loading...
        </Text>
      </View>
      <View
        pointerEvents="box-none"
        style={
          Object {
            "height": 250,
            "overflow": "hidden",
            "width": 750,
          }
        }
      >
        <ViewManagerAdapter_ExpoVideoView
          proxiedProperties={
            Object {
              "onError": [Function],
              "onFullscreenUpdate": [Function],
              "onLoad": [Function],
              "onLoadStart": [Function],
              "onReadyForDisplay": [Function],
              "onStatusUpdate": [Function],
              "resizeMode": "mock",
              "source": undefined,
              "status": Object {},
            }
          }
          style={
            Object {
              "bottom": 0,
              "left": 0,
              "position": "absolute",
              "right": 0,
              "top": 0,
            }
          }
        />
      </View>
    </View>
  </View>
  <View
    style={
      Object {
        "flexDirection": "row",
        "paddingBottom": 2,
      }
    }
  >
    <View
      style={
        Object {
          "alignItems": "center",
          "flexGrow": 0,
          "flexShrink": 0,
        }
      }
    >
      <Text
        style={
          Object {
            "color": "#232b2b",
            "fontSize": 20,
            "fontWeight": "bold",
            "marginBottom": 20,
            "marginLeft": 20,
            "marginTop": 20,
          }
        }
      >
        20
      </Text>
    </View>
    <View
      style={
        Object {
          "flex": 6,
        }
      }
    >
      <Text
        style={
          Object {
            "color": "#232b2b",
            "fontSize": 20,
            "fontWeight": "bold",
            "marginBottom": 20,
            "marginLeft": 20,
            "marginTop": 20,
          }
        }
      >
        Rower Hamstring
      </Text>
    </View>
    <View
      accessible={true}
      focusable={true}
      isTVSelectable={true}
      onClick={[Function]}
      onResponderGrant={[Function]}
      onResponderMove={[Function]}
      onResponderRelease={[Function]}
      onResponderTerminate={[Function]}
      onResponderTerminationRequest={[Function]}
      onStartShouldSetResponder={[Function]}
      style={
        Object {
          "flex": 1,
          "opacity": 1,
        }
      }
    >
      <View
        style={
          Object {
            "opacity": 1,
          }
        }
      >
        <Image
          source={1}
          style={
            Object {
              "alignItems": "center",
              "backgroundColor": "#fff",
              "borderColor": "#d5d5d5",
              "borderRadius": 12.5,
              "borderWidth": 1,
              "height": 25,
              "marginLeft": 20,
              "marginRight": 20,
              "marginTop": 20,
              "position": "absolute",
              "right": 0,
              "width": 25,
            }
          }
        />
      </View>
      <View
        style={
          Object {
            "opacity": 0,
          }
        }
      >
        <Image
          source={1}
          style={
            Object {
              "alignItems": "center",
              "backgroundColor": "#fff",
              "borderColor": "#d5d5d5",
              "borderRadius": 12.5,
              "borderWidth": 1,
              "height": 25,
              "marginLeft": 20,
              "marginRight": 20,
              "marginTop": 20,
              "position": "absolute",
              "right": 0,
              "width": 25,
            }
          }
        />
      </View>
    </View>
  </View>
  <View
    style={
      Object {
        "borderBottomColor": "#DCDCDC",
        "borderBottomWidth": 1,
      }
    }
  />
  <View
    style={
      Object {
        "alignSelf": "flex-end",
        "flexDirection": "row",
      }
    }
  >
    <View
      style={
        Object {
          "flex": 1,
        }
      }
    >
      <View>
        <View
          accessible={true}
          focusable={true}
          isTVSelectable={true}
          onClick={[Function]}
          onResponderGrant={[Function]}
          onResponderMove={[Function]}
          onResponderRelease={[Function]}
          onResponderTerminate={[Function]}
          onResponderTerminationRequest={[Function]}
          onStartShouldSetResponder={[Function]}
          style={
            Object {
              "opacity": 1,
            }
          }
        >
          <View
            style={
              Object {
                "flexDirection": "row",
                "paddingBottom": 2,
              }
            }
          >
            <View
              style={
                Object {
                  "alignItems": "center",
                  "flexGrow": 0,
                  "flexShrink": 0,
                }
              }
            >
              <Text
                style={
                  Object {
                    "color": "#A6A6A6",
                    "fontSize": 20,
                    "marginBottom": 20,
                    "marginLeft": 20,
                    "marginTop": 20,
                  }
                }
              >
                8
              </Text>
            </View>
            <View
              style={
                Object {
                  "flex": 6,
                }
              }
            >
              <Text
                style={
                  Object {
                    "color": "#A6A6A6",
                    "fontSize": 20,
                    "marginBottom": 20,
                    "marginLeft": 20,
                    "marginTop": 20,
                  }
                }
              >
                Full Clean
              </Text>
            </View>
            <View
              style={
                Object {
                  "width": 70,
                }
              }
            />
          </View>
        </View>
      </View>
      <View
        style={
          Object {
            "borderBottomColor": "#DCDCDC",
            "borderBottomWidth": 1,
          }
        }
      />
    </View>
  </View>
</View>
`;

exports[`<DrillIllustration /> renders correctly for a drill with animation 1`] = `
<View
  config={
    Object {
      "directionalOffsetThreshold": 80,
      "gestureIsClickThreshold": 10,
      "velocityThreshold": 0.3,
    }
  }
  onMoveShouldSetResponder={[Function]}
  onMoveShouldSetResponderCapture={[Function]}
  onResponderEnd={[Function]}
  onResponderGrant={[Function]}
  onResponderMove={[Function]}
  onResponderReject={[Function]}
  onResponderRelease={[Function]}
  onResponderStart={[Function]}
  onResponderTerminate={[Function]}
  onResponderTerminationRequest={[Function]}
  onStartShouldSetResponder={[Function]}
  onStartShouldSetResponderCapture={[Function]}
  onSwipeLeft={[Function]}
  onSwipeRight={[Function]}
  style={
    Object {
      "flex": 1,
    }
  }
>
  <View
    style={
      Array [
        Object {
          "alignItems": "flex-start",
          "backgroundColor": "white",
          "flexDirection": "row",
          "justifyContent": "center",
        },
        Object {
          "height": 667,
        },
        Object {
          "width": 750,
        },
      ]
    }
  >
    <View
      onMoveShouldSetResponder={[Function]}
      onMoveShouldSetResponderCapture={[Function]}
      onResponderEnd={[Function]}
      onResponderGrant={[Function]}
      onResponderMove={[Function]}
      onResponderReject={[Function]}
      onResponderRelease={[Function]}
      onResponderStart={[Function]}
      onResponderTerminate={[Function]}
      onResponderTerminationRequest={[Function]}
      onStartShouldSetResponder={[Function]}
      onStartShouldSetResponderCapture={[Function]}
      style={
        Object {
          "alignItems": "center",
          "borderRadius": 55.583333333333336,
          "height": 55.583333333333336,
          "justifyContent": "center",
          "left": 0,
          "position": "absolute",
          "top": 0,
          "transform": Array [
            Object {
              "translateX": 337.5,
            },
            Object {
              "translateY": 40.019999999999996,
            },
          ],
          "width": 55.583333333333336,
        }
      }
    >
      <ViewManagerAdapter_ExpoLinearGradient
        proxiedProperties={
          Object {
            "colors": Array [
              4278759146,
              4281005464,
            ],
            "endPoint": Array [
              0,
              0,
            ],
            "locations": undefined,
            "startPoint": Array [
              1,
              1,
            ],
          }
        }
        style={
          Array [
            Object {
              "alignItems": "center",
              "flex": 1,
              "justifyContent": "center",
            },
            Object {
              "borderRadius": 55.583333333333336,
              "height": 55.583333333333336,
              "width": 55.583333333333336,
            },
          ]
        }
      >
        <Text
          style={
            Object {
              "color": "#fff",
              "fontWeight": "bold",
            }
          }
        >
          1
        </Text>
      </ViewManagerAdapter_ExpoLinearGradient>
    </View>
    <View
      onMoveShouldSetResponder={[Function]}
      onMoveShouldSetResponderCapture={[Function]}
      onResponderEnd={[Function]}
      onResponderGrant={[Function]}
      onResponderMove={[Function]}
      onResponderReject={[Function]}
      onResponderRelease={[Function]}
      onResponderStart={[Function]}
      onResponderTerminate={[Function]}
      onResponderTerminationRequest={[Function]}
      onStartShouldSetResponder={[Function]}
      onStartShouldSetResponderCapture={[Function]}
      style={
        Object {
          "alignItems": "center",
          "backgroundColor": "#AFAFAF",
          "borderRadius": 55.583333333333336,
          "height": 55.583333333333336,
          "justifyContent": "center",
          "left": 0,
          "position": "absolute",
          "top": 0,
          "transform": Array [
            Object {
              "translateX": 337.5,
            },
            Object {
              "translateY": 100.05,
            },
          ],
          "width": 55.583333333333336,
        }
      }
    >
      <Text
        style={
          Object {
            "color": "#fff",
            "fontWeight": "bold",
          }
        }
      >
        2
      </Text>
    </View>
    <View
      onMoveShouldSetResponder={[Function]}
      onMoveShouldSetResponderCapture={[Function]}
      onResponderEnd={[Function]}
      onResponderGrant={[Function]}
      onResponderMove={[Function]}
      onResponderReject={[Function]}
      onResponderRelease={[Function]}
      onResponderStart={[Function]}
      onResponderTerminate={[Function]}
      onResponderTerminationRequest={[Function]}
      onStartShouldSetResponder={[Function]}
      onStartShouldSetResponderCapture={[Function]}
      style={
        Object {
          "alignItems": "center",
          "borderRadius": 55.583333333333336,
          "height": 55.583333333333336,
          "justifyContent": "center",
          "left": 0,
          "position": "absolute",
          "top": 0,
          "transform": Array [
            Object {
              "translateX": 337.5,
            },
            Object {
              "translateY": 300.15000000000003,
            },
          ],
          "width": 55.583333333333336,
        }
      }
    >
      <ViewManagerAdapter_ExpoLinearGradient
        proxiedProperties={
          Object {
            "colors": Array [
              4278759146,
              4281005464,
            ],
            "endPoint": Array [
              0,
              0,
            ],
            "locations": undefined,
            "startPoint": Array [
              1,
              1,
            ],
          }
        }
        style={
          Array [
            Object {
              "alignItems": "center",
              "flex": 1,
              "justifyContent": "center",
            },
            Object {
              "borderRadius": 55.583333333333336,
              "height": 55.583333333333336,
              "width": 55.583333333333336,
            },
          ]
        }
      >
        <Text
          style={
            Object {
              "color": "#fff",
              "fontWeight": "bold",
            }
          }
        >
          3
        </Text>
      </ViewManagerAdapter_ExpoLinearGradient>
    </View>
    <View
      onMoveShouldSetResponder={[Function]}
      onMoveShouldSetResponderCapture={[Function]}
      onResponderEnd={[Function]}
      onResponderGrant={[Function]}
      onResponderMove={[Function]}
      onResponderReject={[Function]}
      onResponderRelease={[Function]}
      onResponderStart={[Function]}
      onResponderTerminate={[Function]}
      onResponderTerminationRequest={[Function]}
      onStartShouldSetResponder={[Function]}
      onStartShouldSetResponderCapture={[Function]}
      style={
        Object {
          "backgroundColor": "white",
          "borderColor": "black",
          "borderRadius": 20,
          "borderWidth": 2,
          "height": 20,
          "left": 0,
          "position": "absolute",
          "top": 0,
          "transform": Array [
            Object {
              "translateX": 315,
            },
            Object {
              "translateY": 73.37,
            },
          ],
          "width": 20,
        }
      }
    />
    <View
      style={
        Object {
          "bottom": 0,
          "flexDirection": "row",
          "marginLeft": 30,
          "position": "absolute",
          "right": 0,
        }
      }
    >
      <View
        accessible={true}
        focusable={true}
        isTVSelectable={true}
        onClick={[Function]}
        onResponderGrant={[Function]}
        onResponderMove={[Function]}
        onResponderRelease={[Function]}
        onResponderTerminate={[Function]}
        onResponderTerminationRequest={[Function]}
        onStartShouldSetResponder={[Function]}
        style={
          Object {
            "alignItems": "center",
            "height": 30,
            "justifyContent": "center",
            "opacity": 1,
            "width": 30,
          }
        }
      >
        <Image
          source={1}
          style={
            Object {
              "height": 20,
              "width": 20,
            }
          }
        />
      </View>
      <View
        accessible={true}
        focusable={true}
        isTVSelectable={true}
        onClick={[Function]}
        onResponderGrant={[Function]}
        onResponderMove={[Function]}
        onResponderRelease={[Function]}
        onResponderTerminate={[Function]}
        onResponderTerminationRequest={[Function]}
        onStartShouldSetResponder={[Function]}
        style={
          Object {
            "alignItems": "center",
            "height": 30,
            "justifyContent": "center",
            "opacity": 1,
            "width": 30,
          }
        }
      >
        <Image
          source={1}
          style={
            Object {
              "height": 20,
              "width": 20,
            }
          }
        />
      </View>
      <View
        accessible={true}
        focusable={true}
        isTVSelectable={true}
        onClick={[Function]}
        onResponderGrant={[Function]}
        onResponderMove={[Function]}
        onResponderRelease={[Function]}
        onResponderTerminate={[Function]}
        onResponderTerminationRequest={[Function]}
        onStartShouldSetResponder={[Function]}
        style={
          Object {
            "alignItems": "center",
            "height": 30,
            "justifyContent": "center",
            "opacity": 1,
            "width": 30,
          }
        }
      >
        <Image
          source={1}
          style={
            Object {
              "height": 20,
              "width": 20,
            }
          }
        />
      </View>
    </View>
    <View
      style={
        Object {
          "backgroundColor": "gray",
          "bottom": 10,
          "height": 10,
          "left": 20,
          "position": "absolute",
          "width": 630,
        }
      }
    />
    <View
      style={
        Object {
          "backgroundColor": "black",
          "bottom": 10,
          "height": 10,
          "left": 20,
          "position": "absolute",
          "width": 0,
        }
      }
    />
    <View
      accessible={true}
      focusable={true}
      isTVSelectable={true}
      onClick={[Function]}
      onResponderGrant={[Function]}
      onResponderMove={[Function]}
      onResponderRelease={[Function]}
      onResponderTerminate={[Function]}
      onResponderTerminationRequest={[Function]}
      onStartShouldSetResponder={[Function]}
      style={
        Object {
          "backgroundColor": "transparent",
          "bottom": 0,
          "height": 25,
          "left": 10,
          "opacity": 1,
          "position": "absolute",
          "width": 157.5,
        }
      }
    />
    <View
      accessible={true}
      focusable={true}
      isTVSelectable={true}
      onClick={[Function]}
      onResponderGrant={[Function]}
      onResponderMove={[Function]}
      onResponderRelease={[Function]}
      onResponderTerminate={[Function]}
      onResponderTerminationRequest={[Function]}
      onStartShouldSetResponder={[Function]}
      style={
        Object {
          "backgroundColor": "transparent",
          "bottom": 0,
          "height": 25,
          "left": 167.5,
          "opacity": 1,
          "position": "absolute",
          "width": 315,
        }
      }
    />
    <View
      accessible={true}
      focusable={true}
      isTVSelectable={true}
      onClick={[Function]}
      onResponderGrant={[Function]}
      onResponderMove={[Function]}
      onResponderRelease={[Function]}
      onResponderTerminate={[Function]}
      onResponderTerminationRequest={[Function]}
      onStartShouldSetResponder={[Function]}
      style={
        Object {
          "backgroundColor": "transparent",
          "bottom": 0,
          "height": 25,
          "left": 482.5,
          "opacity": 1,
          "position": "absolute",
          "width": 172.5,
        }
      }
    />
  </View>
  <Text
    style={
      Object {
        "alignItems": "center",
        "color": "#232b2b",
        "fontSize": 16,
        "justifyContent": "center",
        "marginBottom": 20,
        "marginLeft": 20,
        "marginTop": 20,
      }
    }
  />
</View>
`;

exports[`<DrillIllustration /> renders correctly for a drill with no video nor animation 1`] = `
<View
  config={
    Object {
      "directionalOffsetThreshold": 80,
      "gestureIsClickThreshold": 10,
      "velocityThreshold": 0.3,
    }
  }
  onMoveShouldSetResponder={[Function]}
  onMoveShouldSetResponderCapture={[Function]}
  onResponderEnd={[Function]}
  onResponderGrant={[Function]}
  onResponderMove={[Function]}
  onResponderReject={[Function]}
  onResponderRelease={[Function]}
  onResponderStart={[Function]}
  onResponderTerminate={[Function]}
  onResponderTerminationRequest={[Function]}
  onStartShouldSetResponder={[Function]}
  onStartShouldSetResponderCapture={[Function]}
  onSwipeLeft={[Function]}
  onSwipeRight={[Function]}
  style={
    Object {
      "flex": 1,
    }
  }
>
  <View
    style={
      Object {
        "alignItems": "center",
        "flex": 1,
        "justifyContent": "space-around",
        "padding": 20,
      }
    }
  >
    <Text
      style={
        Object {
          "color": "#232b2b",
          "fontSize": 16,
          "fontWeight": "bold",
          "marginVertical": 50,
        }
      }
    >
      You have completed the drill!
    </Text>
    <View
      accessible={true}
      focusable={true}
      isTVSelectable={true}
      onClick={[Function]}
      onResponderGrant={[Function]}
      onResponderMove={[Function]}
      onResponderRelease={[Function]}
      onResponderTerminate={[Function]}
      onResponderTerminationRequest={[Function]}
      onStartShouldSetResponder={[Function]}
      style={
        Object {
          "backgroundColor": "#fff",
          "borderRadius": 40,
          "height": 80,
          "opacity": 1,
          "width": 80,
        }
      }
    >
      <Image
        source={1}
        style={
          Object {
            "height": 60,
            "width": 60,
          }
        }
      />
    </View>
  </View>
</View>
`;

exports[`<DrillIllustration /> renders correctly for a drill with video 1`] = `
<View
  config={
    Object {
      "directionalOffsetThreshold": 80,
      "gestureIsClickThreshold": 10,
      "velocityThreshold": 0.3,
    }
  }
  onMoveShouldSetResponder={[Function]}
  onMoveShouldSetResponderCapture={[Function]}
  onResponderEnd={[Function]}
  onResponderGrant={[Function]}
  onResponderMove={[Function]}
  onResponderReject={[Function]}
  onResponderRelease={[Function]}
  onResponderStart={[Function]}
  onResponderTerminate={[Function]}
  onResponderTerminationRequest={[Function]}
  onStartShouldSetResponder={[Function]}
  onStartShouldSetResponderCapture={[Function]}
  onSwipeLeft={[Function]}
  onSwipeRight={[Function]}
  style={
    Object {
      "flex": 1,
    }
  }
>
  <View
    style={
      Object {
        "height": 250,
      }
    }
  >
    <View
      style={
        Array [
          Object {
            "flex": 1,
            "overflow": "hidden",
          },
          undefined,
        ]
      }
    >
      <RNCWebView
        cacheEnabled={true}
        javaScriptEnabled={true}
        messagingEnabled={false}
        onContentProcessDidTerminate={[Function]}
        onHttpError={[Function]}
        onLoadingError={[Function]}
        onLoadingFinish={[Function]}
        onLoadingProgress={[Function]}
        onLoadingStart={[Function]}
        onMessage={[Function]}
        onShouldStartLoadWithRequest={[Function]}
        source={
          Object {
            "uri": "https://www.youtube.com/embed/JkVHrA5o23o",
          }
        }
        style={
          Array [
            Object {
              "flex": 1,
              "overflow": "hidden",
            },
            Object {
              "backgroundColor": "#ffffff",
            },
            undefined,
          ]
        }
        useSharedProcessPool={true}
      />
    </View>
  </View>
</View>
`;
